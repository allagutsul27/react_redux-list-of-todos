{"version":3,"sources":["enum/StatusFilter.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["StatusFilter","actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialState","filterReducer","filter","toLowerCase","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","newTodos","title","includes","Active","completed","Completed","length","className","map","id","isSelectedTodo","cn","onClick","currentTodoActions","handleSelectedTodo","TodoFilter","useState","setQuery","onSubmit","event","preventDefault","onChange","filterActions","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","user","setUser","isLoading","setIsLoading","useEffect","userId","finally","href","email","name","App","todosFromServer","setTodosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f1282a5.chunk.js","sourcesContent":["export enum StatusFilter {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (state: State = null, action: Action): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetFilterAction = { type: 'filter/STATUS', payload: Status };\ntype SetQueryAction = { type: 'filter/QUERY', payload: string };\n\ntype Action = SetFilterAction | SetQueryAction;\n\nconst setFilter = (status: Status): SetFilterAction => ({\n  type: 'filter/STATUS', payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/QUERY', payload: query,\n});\n\nexport const actions = { setFilter, setQuery };\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState = {\n  query: '',\n  status: 'all' as Status,\n};\n\nconst filterReducer = (filter: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return {\n        ...filter,\n        status: action.payload,\n      };\n\n    case 'filter/QUERY':\n      return {\n        ...filter,\n        query: action.payload.toLowerCase(),\n      };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo[] };\n\ntype Action = SetTodosAction;\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET', payload: todos,\n});\n\nexport const actions = { loadTodos: setTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useMemo } from 'react';\nimport cn from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { StatusFilter } from '../../enum/StatusFilter';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const filteredTodos = useMemo(() => {\n    let newTodos = [...todos];\n\n    if (query) {\n      newTodos = newTodos.filter(\n        todo => todo.title.toLowerCase().includes(query),\n      );\n    }\n\n    switch (status) {\n      case StatusFilter.Active:\n        return newTodos.filter(todo => !todo.completed);\n\n      case StatusFilter.Completed:\n        return newTodos.filter(todo => todo.completed);\n\n      default:\n        return newTodos;\n    }\n  }, [status, query]);\n\n  const handleSelectedTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {filteredTodos.length > 0\n        ? (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {filteredTodos.map(todo => {\n                const { id, title, completed } = todo;\n                const isSelectedTodo = currentTodo?.id === id;\n\n                return (\n                  <tr\n                    key={id}\n                    data-cy=\"todo\"\n                    className={cn({\n                      'has-background-info-light': isSelectedTodo,\n                    })}\n                  >\n                    <td className=\"is-vcentered\">{id}</td>\n                    <td className=\"is-vcentered\">\n                      {completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      {completed ? (\n                        <p className=\"has-text-success\">\n                          {title}\n                        </p>\n                      ) : (\n                        <p className=\"has-text-danger\">\n                          {title}\n                        </p>\n                      )}\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => handleSelectedTodo(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i className={cn('far', {\n                            'fa-eye': !isSelectedTodo,\n                            'fa-eye-slash': isSelectedTodo,\n                          })}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        ) : (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const dispatch = useAppDispatch();\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleQueryClear = () => {\n    setQuery('');\n\n    dispatch(filterActions.setQuery(''));\n  };\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setFilter(event.target.value as Status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.length > 0\n            && (\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                aria-label=\"Clear Search\"\n                onClick={handleQueryClear}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, [currentTodo]);\n\n  const handleCloseTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${currentTodo?.id}`}\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            aria-label=\"closeButton\"\n            onClick={handleCloseTodo}\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            {currentTodo?.completed ? (\n              <strong className=\"has-text-success\">Done</strong>\n            ) : (\n              <strong className=\"has-text-danger\">Planned</strong>\n            )}\n            {' by '}\n            <a href={`mailto:${user?.email}`}>{user?.name}</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as setTodosActions } from './features/todos';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(todosFromServer => dispatch(\n        setTodosActions.loadTodos(todosFromServer),\n      ))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            {isLoading && <Loader />}\n\n            {!!todos.length\n              && (\n                <>\n                  <div className=\"block\">\n                    <TodoFilter />\n                  </div>\n\n                  <div className=\"block\">\n                    <TodoList />\n                  </div>\n                </>\n              )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}